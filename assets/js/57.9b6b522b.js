(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{489:function(a,s,t){"use strict";t.r(s);var n=t(0),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("# 概述")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210703172421895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("即所谓的"),s("code",[a._v("Java虚拟机")]),a._v("，是一个软件，用来执行一系列虚拟计算机指令，是二进制字节码的"),s("code",[a._v("运行环境")]),a._v("，负责装载字节码到其内部，解释（编译）为对应平台上的机器指令执行。")]),a._v(" "),s("p",[a._v("其实，说"),s("code",[a._v("JVM")]),a._v("是"),s("code",[a._v("Java")]),a._v("的虚拟机已经不太准确，因为现在的"),s("code",[a._v("JVM")]),a._v("已经是一个跨语言的平台了，不仅是"),s("code",[a._v("Java")]),a._v("、"),s("code",[a._v("Kotlin")]),a._v("、"),s("code",[a._v("Clojure")]),a._v("，"),s("code",[a._v("Groovy")]),a._v("、"),s("code",[a._v("Scala")]),a._v("甚至"),s("code",[a._v("JavaScript")]),a._v("也可以通过特定的编译器进行编译生成字节码文件（字节码文件是编译后的二进制产物，不论是用什么语言进行编写的，只要能编译成对应的字节码文件，就能在"),s("code",[a._v("JVM")]),a._v("上运行）。因此，"),s("code",[a._v("JVM")]),a._v("就像是制定了一套自己的语言标准，其它任何语言都可以翻译到"),s("code",[a._v("JVM")]),a._v("，再由"),s("code",[a._v("JVM")]),a._v("和操作系统打交道，具体的针对不同平台的指令进行执行。")]),a._v(" "),s("h2",{attrs:{id:"jdk、jre、jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk、jre、jvm"}},[a._v("#")]),a._v(" JDK、JRE、JVM")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("JDK（Java Development Kit）Java开发工具包")]),a._v("：是用来编译、调式"),s("code",[a._v("Java")]),a._v("程序的开发工具包。包括"),s("code",[a._v("Java")]),a._v("工具"),s("code",[a._v("（javac/java/jdb等）")]),a._v("和"),s("code",[a._v("Java")]),a._v("基础的类库"),s("code",[a._v("（Java API）")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JRE（Java Runtime Environment）Java运行时环境")]),a._v(": 是"),s("code",[a._v("Java平台")]),a._v("，所有的程序都要在"),s("code",[a._v("JRE")]),a._v("下才能运行。包括"),s("code",[a._v("JVM")]),a._v("和"),s("code",[a._v("Java")]),a._v("核心类库和支持文件。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JVM（Java Virtual Machine）Java虚拟机")]),a._v("：是"),s("code",[a._v("JRE")]),a._v("的一部分。"),s("code",[a._v("JVM")]),a._v("主要工作是解释自己的指令集（即字节码）并映射到本地的"),s("code",[a._v("CPU")]),a._v("指令集和"),s("code",[a._v("OS")]),a._v("的系统调用。"),s("code",[a._v("Java")]),a._v("语言是跨平台运行的，不同的操作系统会有不用的"),s("code",[a._v("JVM")]),a._v("映射规则，使之与操作系统无关，完成跨平台性。")])])]),a._v(" "),s("p",[a._v("从大到小：JDK->JRE->JVM")]),a._v(" "),s("p",[a._v("使用"),s("code",[a._v("JDK")]),a._v("（调用"),s("code",[a._v("Java API")]),a._v("）开发"),s("code",[a._v("Java")]),a._v("程序后，通过"),s("code",[a._v("JDK")]),a._v("中的编译程序"),s("code",[a._v("(javac)")]),a._v("将"),s("code",[a._v("Java")]),a._v("程序编译为"),s("code",[a._v("Java")]),a._v("字节码，在"),s("code",[a._v("JRE")]),a._v("上运行这些字节码，"),s("code",[a._v("JVM")]),a._v("会解析并映射到真实操作系统的"),s("code",[a._v("CPU")]),a._v("指令集和"),s("code",[a._v("OS")]),a._v("的系统调用。")]),a._v(" "),s("h2",{attrs:{id:"jvm位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm位置"}},[a._v("#")]),a._v(" JVM位置")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("是运行在操作系统之上的，它与硬件没有直接的交互。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210703172701984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h2",{attrs:{id:"jvm特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm特点"}},[a._v("#")]),a._v(" JVM特点")]),a._v(" "),s("p",[a._v("1、一次编译，到处运行")]),a._v(" "),s("p",[a._v("2、自动内存管理")]),a._v(" "),s("p",[a._v("2、自动垃圾回收机制")]),a._v(" "),s("h2",{attrs:{id:"jvm结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm结构"}},[a._v("#")]),a._v(" JVM结构")]),a._v(" "),s("p",[s("code",[a._v("Java虚拟机")]),a._v("在执行"),s("code",[a._v("Java")]),a._v("程序的过程中会把它所管理的内存划分为若干不同的数据区域。根据"),s("code",[a._v("Java虚拟机规范")]),a._v("的规定，"),s("code",[a._v("Java虚拟机")]),a._v("所管理的内存有以下几个区域：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210703172607896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\n在实际上，为了更好的适应"),s("code",[a._v("CPU")]),a._v("性能提升，最大限度提升"),s("code",[a._v("JVM")]),a._v("运行效率，"),s("code",[a._v("JDK")]),a._v("中各个版本对"),s("code",[a._v("JVM")]),a._v("进行了一些迭代：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210707135500757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[s("code",[a._v("JDK1.6")]),a._v("、"),s("code",[a._v("JDK1.7")]),a._v("、"),s("code",[a._v("JDK1.8")]),a._v("主要有以下差异：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("JDK1.6")]),a._v("：有永久代，静态变量存放在永久代上。")]),a._v(" "),s("li",[s("code",[a._v("JDK1.7")]),a._v("：有永久代，但已经把字符串常量池、静态变量、存放在堆上。逐渐减少永久代的使用。")]),a._v(" "),s("li",[s("code",[a._v("JDK1.8")]),a._v("：去除永久代。运行时常量池、类常量池都保存在元数据区，也就是常说的"),s("code",[a._v("元空间")]),a._v("。但是字符串常量池依然存放在堆上。")])]),a._v(" "),s("h3",{attrs:{id:"class常量池、运行时常量池、字符串常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class常量池、运行时常量池、字符串常量池"}},[a._v("#")]),a._v(" Class常量池、运行时常量池、字符串常量池")]),a._v(" "),s("blockquote",[s("p",[a._v("为什么需要常量池")])]),a._v(" "),s("p",[a._v("一个"),s("code",[a._v("Java")]),a._v("源文件中的类、接口，编译后会产生一个字节码文件，而"),s("code",[a._v("Java")]),a._v("中的字节码文件需要其他的数据支撑，通常这种数据很大，不能直接存放到字节码里面。所以把对这些数据的引用存放到常量池，在真正需要的时候，通过动态链接将符号引用转为直接引用。")]),a._v(" "),s("blockquote",[s("p",[a._v("符号引用和直接引用")])]),a._v(" "),s("p",[a._v("1、符号引用：符号引用是一组符号来描述是引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标就行。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定加载到了内存中。")]),a._v(" "),s("p",[a._v("2、直接引用：直接引用可以是指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接目标与虚拟机内存布局相关，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在与内存之中了。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210713221720356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v(" "),s("code",[a._v("Constant Pool")]),a._v("也就是常量池中有22项内容，其中带"),s("code",[a._v("Utf8")]),a._v("的就是符号引用。比如"),s("code",[a._v("#2")]),a._v("，它的值是"),s("code",[a._v("com/xrq/test6/TestMain")]),a._v("，表示的是这个类的全限定名；又比如"),s("code",[a._v("#5")]),a._v("为"),s("code",[a._v("i")]),a._v("，"),s("code",[a._v("#6")]),a._v("为"),s("code",[a._v("I")]),a._v("，它们是一对的，表示变量是"),s("code",[a._v("Integer（int）")]),a._v("类型的，名字叫做"),s("code",[a._v("i")]),a._v("；"),s("code",[a._v("#6")]),a._v("为"),s("code",[a._v("D")]),a._v("、"),s("code",[a._v("#7")]),a._v("为"),s("code",[a._v("d")]),a._v("也是一样，表示一个"),s("code",[a._v("Double（double）")]),a._v("类型的变量，名字为"),s("code",[a._v("d")]),a._v("；"),s("code",[a._v("#18")]),a._v("、"),s("code",[a._v("#19")]),a._v("表示的都是方法的名字。")]),a._v(" "),s("ul",[s("li",[a._v("Class常量池")])]),a._v(" "),s("p",[a._v("当"),s("code",[a._v("Java")]),a._v("类被编译后形成"),s("code",[a._v("class")]),a._v("文件，"),s("code",[a._v("class")]),a._v("文件中除了包含类的版本、字段、方法、接口等描述信息外。还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714160929458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714150642804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("ul",[s("li",[a._v("运行时常量池")])]),a._v(" "),s("p",[a._v("常量池指的是字节码中的"),s("code",[a._v("Constant pool")]),a._v("部分，当字节码文件被加载到内存中后，方法区中会存放字节码文件的"),s("code",[a._v("Constant pool")]),a._v("相关信息，这时候也就成为了运行时常量池。运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用。此时不再是常量池中的符号地址了，而是真实地址。")]),a._v(" "),s("p",[a._v("另外，运行时常量池具有动态性。也就是在方法区中的运行时常量池是可以发生变化的。而常量池不是，它是静态的，当编译生成字节码文件后就不变了。")]),a._v(" "),s("ul",[s("li",[a._v("字符串常量池")])]),a._v(" "),s("p",[a._v("全局字符串常量池（也就是字符串常量池 "),s("code",[a._v("string pool")]),a._v("也有叫做"),s("code",[a._v("string literal pool")]),a._v("）里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到字符串常量池中。（字符串常量池中存的是引用值，而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）在"),s("code",[a._v("HotSpot VM")]),a._v("里实现的字符串常量池功能是一个"),s("code",[a._v("StringTable")]),a._v("类，它是一个哈希表，里面存的是驻留字符串（也就是常说的用双引号括起来的）的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个"),s("code",[a._v("StringTable")]),a._v("引用之后就等同被赋予了“驻留字符串”的身份。这个"),s("code",[a._v("StringTable")]),a._v("在每个"),s("code",[a._v("HotSpot VM")]),a._v("的实例只有一份，被所有的类共享。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714163820170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h2",{attrs:{id:"class-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-file"}},[a._v("#")]),a._v(" Class File")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/zsql/p/12907120.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("java class文件详解"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"类加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[a._v("#")]),a._v(" 类加载机制")]),a._v(" "),s("p",[s("code",[a._v("Java虚拟机")]),a._v("把描述类的数据从"),s("code",[a._v("Class")]),a._v("文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的"),s("code",[a._v("Java")]),a._v("类的原型（类模板对象），这就是虚拟机的类加载机制。")]),a._v(" "),s("blockquote",[s("p",[a._v("所谓类模板对象，其实就是"),s("code",[a._v("Java")]),a._v("类在"),s("code",[a._v("JVM")]),a._v("内存中的一个快照，"),s("code",[a._v("JVM")]),a._v("将从字节码文件中解析出的常量池、类字段、类方法等信息存储到类模板中。这样"),s("code",[a._v("JVM")]),a._v("在运行期便能通过类模板而获取"),s("code",[a._v("Java")]),a._v("类中的任意信息。能够对"),s("code",[a._v("Java")]),a._v("类的成员变量进行遍历，也能进行"),s("code",[a._v("Java")]),a._v("方法的调用。")])]),a._v(" "),s("h3",{attrs:{id:"类的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[a._v("#")]),a._v(" 类的生命周期")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714073817321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h4",{attrs:{id:"类的加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[a._v("#")]),a._v(" 类的加载")]),a._v(" "),s("p",[a._v("类的加载指的就是将类的"),s("code",[a._v("class")]),a._v("文件中的二进制数据读取到内存中，存放在运行时数据区的方法区中，并在堆中创建一个大的"),s("code",[a._v("java.lang.Class")]),a._v("对象，用来封装方法区内的数据结构。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210712074659537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("blockquote",[s("p",[a._v("加载时虚拟机做了什么")])]),a._v(" "),s("ul",[s("li",[a._v("通过类的全名，获取类的二进制数据流")]),a._v(" "),s("li",[a._v("解析类的二进制数据流为方法区内的数据结构（"),s("code",[a._v("Java")]),a._v("类模型）")]),a._v(" "),s("li",[a._v("创建"),s("code",[a._v("java.lang.Class")]),a._v("类的实例,表示该类型。作为方法区这个类的各种数据的访问入口。（一般这个"),s("code",[a._v("class")]),a._v("对象会存储在堆中，不过"),s("code",[a._v("HotSpot")]),a._v("虚拟机比较特殊，这个"),s("code",[a._v("class")]),a._v("对象是放在方法区中的。）")])]),a._v(" "),s("blockquote",[s("p",[a._v("何时加载")])]),a._v(" "),s("ul",[s("li",[a._v("预加载：在虚拟机启动的时候会加载，加载的时"),s("code",[a._v("JAVA_HOME/lib")]),a._v("下的"),s("code",[a._v("rt.class")]),a._v("下的"),s("code",[a._v(".class")]),a._v("文件，是"),s("code",[a._v("java")]),a._v("程序运行时需要的类。比如"),s("code",[a._v("java.lang.*")]),a._v("以及"),s("code",[a._v("java,util.*")]),a._v("等")]),a._v(" "),s("li",[a._v("运行时加载：虚拟机中在用到一个"),s("code",[a._v(".class")]),a._v("文件时，首先会去内存找你查找这个"),s("code",[a._v(".class")]),a._v("文件有没有被加载，没有被加载会根据这个类的全限定名去加载。")])]),a._v(" "),s("blockquote",[s("p",[a._v("怎么获取类的二进制流")])]),a._v(" "),s("ul",[s("li",[a._v("通过文件系统读入一个"),s("code",[a._v("class")]),a._v("后缀的文件")]),a._v(" "),s("li",[a._v("从"),s("code",[a._v("zip")]),a._v("包中获取，这就是以后"),s("code",[a._v("jar")]),a._v("、"),s("code",[a._v("ear")]),a._v("、"),s("code",[a._v("war")]),a._v("格式的基础")]),a._v(" "),s("li",[a._v("从网络中获取，典型应用就是"),s("code",[a._v("Applet")])]),a._v(" "),s("li",[a._v("运行时计算生成，典型应用就是动态代理技术")]),a._v(" "),s("li",[a._v("由其他文件生成，典型应用就是"),s("code",[a._v("JSP")]),a._v("，即由"),s("code",[a._v("JSP")]),a._v("生成对应的"),s("code",[a._v(".class")]),a._v("文件")]),a._v(" "),s("li",[a._v("从数据库中读取，这种场景比较少见")])]),a._v(" "),s("p",[a._v("其实无论是通过"),s("code",[a._v("ZIP")]),a._v("，还是通过网络，还是通过其他文件生成，最终都是通过一个类的全限定名来获取类的二进制字节流。 通过一个类的全限定名来获取类的二进制字节流是目的，"),s("code",[a._v("ZIP")]),a._v("，网络，文件是手段。")]),a._v(" "),s("h4",{attrs:{id:"类的验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的验证"}},[a._v("#")]),a._v(" 类的验证")]),a._v(" "),s("p",[a._v("即验证"),s("code",[a._v("Class")]),a._v("文件的字节流中包含的信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害虚拟机自身安全。")]),a._v(" "),s("blockquote",[s("p",[a._v("四种验证")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("文件格式验证：验证字节流是否符合"),s("code",[a._v("Class")]),a._v("文件规范，符合规范通过验证才能保证输入的字节流能正确的被解析并存储到方法区。")])]),a._v(" "),s("li",[s("p",[a._v("元数据验证：对类的元数据信息进行语义校验")])]),a._v(" "),s("li",[s("p",[a._v("字节码验证：检验程序语义是否符合规范，符合逻辑，对类的方法进行校验")])]),a._v(" "),s("li",[s("p",[a._v("符号引用验证：发生在将符号引用转换为直接引用的时候，可以看作是对类自身以外（常量池中各种符号的应用）信息的匹配校验。如：符号引用中通过字符串描述的全限定名是否能找到对应的类；符号引用中的类、字段、方法的访问性（"),s("code",[a._v("private、protected、public、default")]),a._v("）是否可被当前类访问")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021071321551948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h4",{attrs:{id:"类的准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的准备"}},[a._v("#")]),a._v(" 类的准备")]),a._v(" "),s("p",[a._v("准备：为类变量分配内存并默认初始化值。")]),a._v(" "),s("p",[a._v("注意：")]),a._v(" "),s("ul",[s("li",[a._v("只为类变量，即被"),s("code",[a._v("static")]),a._v("修饰的变量分配内存，实例变量在实例初始化的时候会随对象一起分配在堆中。")]),a._v(" "),s("li",[a._v("这个阶段初始化赋值的变量不包括"),s("code",[a._v("final")]),a._v("修饰的"),s("code",[a._v("static")]),a._v("变量，因为"),s("code",[a._v("final")]),a._v("在编译的时候就会分配了,准备阶段会显式赋值。")]),a._v(" "),s("li",[s("code",[a._v("Java")]),a._v("并不支持"),s("code",[a._v("boolean")]),a._v("类型，对于"),s("code",[a._v("boolean")]),a._v("类型，内部实现是"),s("code",[a._v("int")]),a._v(",由于"),s("code",[a._v("int")]),a._v("的默认值是0,故对应的，"),s("code",[a._v("boolean")]),a._v("的默认值就是"),s("code",[a._v("false")]),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021071322090133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])]),a._v(" "),s("h4",{attrs:{id:"类的解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的解析"}},[a._v("#")]),a._v(" 类的解析")]),a._v(" "),s("p",[a._v("解析：将常量池中的符号引用转为直接引用的过程。（将类、接口、字段和方法的符号引用转为直接引用）。")]),a._v(" "),s("p",[a._v("虚拟机在加载"),s("code",[a._v("Class")]),a._v("文件时才会动态链接，也就是说，"),s("code",[a._v("Class")]),a._v("文件中不会保存各个方法和字段的最终内存布局信息。因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。当虚拟机运行，要从常量池中获得对应的符号引用，再在类加载过程中（初始化阶段）将其替换成直接引用。")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机规范并没有明确要求解析阶段一定要按照顺序执行。在"),s("code",[a._v("HotSpot VM")]),a._v("中,加载、验证、准备和初始化会按照顺序有条不紊地执行,但链接阶段中的解析操作往往会伴随着"),s("code",[a._v("JVM")]),a._v("在执行完初始化之后再执行")]),a._v(" "),s("h4",{attrs:{id:"类的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的初始化"}},[a._v("#")]),a._v(" 类的初始化")]),a._v(" "),s("p",[a._v("开始真正执行类中定义的"),s("code",[a._v("Java")]),a._v("代码，初始化过程就是执行类构造器"),s("code",[a._v("<clint>()")]),a._v("的过程。之前的准备阶段是给类变量分配内存赋初始值，初始化是将类变量赋予用户指定的值。")]),a._v(" "),s("p",[a._v("此方法不需要定义，是"),s("code",[a._v("javac")]),a._v("编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。")]),a._v(" "),s("p",[a._v("若类有父类，"),s("code",[a._v("JVM")]),a._v("会保证在子类的"),s("code",[a._v("<clint>()")]),a._v("执行前，先完成父类的"),s("code",[a._v("<clint>()")]),a._v("。"),s("code",[a._v("<clint>()")]),a._v("不同与类的构造方法"),s("code",[a._v("init")]),a._v("(由父及子，静态先行)")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("编译器不会为所有的类都产生"),s("code",[a._v("<clint>()")]),a._v("初始化方法。有些类在编译为字节码后，字节码文件中不会包含"),s("code",[a._v("<clint>()")]),a._v("方法。")]),a._v(" "),s("ul",[s("li",[a._v("一个类中没有声明任何变量，也没有静态代码块时")]),a._v(" "),s("li",[a._v("一个类中声明类变量，但是没有明确使用类变量的初始化语句以及静态代码块来执行初始化操作时")]),a._v(" "),s("li",[a._v("一个类中包含"),s("code",[a._v("static，final")]),a._v("修饰的基本数据类型的字段，这些类字段初始化语句采用编译时常量表达式（如果这个"),s("code",[a._v("static，final")]),a._v("不是通过方法或者构造器，则在链接阶段。）")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 哪些场景下，java编译器就不会生成<clinit>()方法\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InitializationTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//对应非静态的字段，不管是否进行了显式赋值，都不会生成<clinit>()方法")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//静态的字段，没有显式的赋值，不会生成<clinit>()方法")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//比如对于声明为static final的基本数据类型的字段，不管是否进行了显式赋值，都不会生成<clinit>()方法")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 说明：使用static + final修饰的字段的显式赋值的操作，到底是在哪个阶段进行的赋值？\n * 情况1：在链接阶段的准备环节赋值\n * 情况2：在初始化阶段<clinit>()中赋值\n * 结论：\n * 在链接阶段的准备环节赋值的情况：\n * 1. 对于基本数据类型的字段来说，如果使用static final修饰，\n * 则显式赋值(直接赋值常量，而非调用方法）通常是在链接阶段的准备环节进行\n * \n * 2. 对于String来说，如果使用字面量的方式赋值，使用static final修饰的话，\n * 则显式赋值通常是在链接阶段的准备环节进行\n *\n * 在初始化阶段<clinit>()中赋值的情况：\n * 排除上述的在准备环节赋值的情况之外的情况。\n * 最终结论：使用static + final修饰，\n * 且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值，\n * 是在链接阶段的准备环节进行。\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InitializationTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在初始化阶段<clinit>()中赋值")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("INT_CONSTANT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在链接阶段的准备环节赋值")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("INTEGER_CONSTANT1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在初始化阶段<clinit>()中赋值")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("INTEGER_CONSTANT2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在初始化阶段<clinit>()中赋值")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"helloworld0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在链接阶段的准备环节赋值")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"helloworld1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在初始化阶段<clinit>()中赋值")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"helloworld2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("NUM1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在初始化阶段<clinit>()中赋值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br")])]),s("p",[s("strong",[a._v("触发初始化")])]),a._v(" "),s("p",[a._v("如果一个类被直接引用，就会触发类的初始化。在"),s("code",[a._v("java")]),a._v("中，直接引用的情况有：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("通过"),s("code",[a._v("new")]),a._v("关键字实例化对象、读取或设置类的静态变量、调用类的静态方法。")])]),a._v(" "),s("li",[s("p",[a._v("通过反射方式执行以上三种行为。")])]),a._v(" "),s("li",[s("p",[a._v("初始化子类的时候，会触发父类的初始化。")])]),a._v(" "),s("li",[s("p",[a._v("作为程序入口直接运行时（也就是直接调用"),s("code",[a._v("main")]),a._v("方法）。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JDK1.7")]),a._v("开始提供的动态语言支持，如果一个"),s("code",[a._v("java.lang.invoke.MethodHandle")]),a._v("实例最后的解析结果"),s("code",[a._v("REF_getStatic、REF_putStatic、REF_invokeStatic")]),a._v("的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化")])])]),a._v(" "),s("p",[a._v("除了以上的情况属于主动使用，其他的情况均属于被动使用。被动使用不会引起类的初始化。意味着没有"),s("code",[a._v("<clint>()")]),a._v("的调用")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("调用"),s("code",[a._v("ClassLoader")]),a._v("类的"),s("code",[a._v("loadClass()")]),a._v("方法加载一个类，并不是对类的主动使用，不会导致类的初始化")])]),a._v(" "),s("li",[s("p",[a._v("当访问一个静态字段时，只有真正声明这个字段的类才会被初始化。当通过子类引用父类的静态变量，不会导致子类初始化")])]),a._v(" "),s("li",[s("p",[a._v("引用常量不会触发此类或接口的初始化。因为常量在链接阶段就已经被显式赋值了")])]),a._v(" "),s("li",[s("p",[a._v("通过数组定义类引用，不会触发此类的初始化")])])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("# 这里不会进行初始化"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("因为相当于parent只开辟了空间"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("没赋值\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"类的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的使用"}},[a._v("#")]),a._v(" 类的使用")]),a._v(" "),s("p",[a._v('任何一个类型在使用之前都必须经历过完整的加载、链接和初始化3个类加载步骤。一旦一个类型成功经历过这3个步骤之后，便"万事俱备,只欠东风"就等着开发者使用了')]),a._v(" "),s("p",[a._v("开发人员可以在程序中访问和调用它的静态类成员信息(比如：静态字段、静态方法)或者使用"),s("code",[a._v("new")]),a._v("关键字为其创建对象实例")]),a._v(" "),s("h4",{attrs:{id:"类的卸载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的卸载"}},[a._v("#")]),a._v(" 类的卸载")]),a._v(" "),s("p",[a._v("卸载类即该类的"),s("code",[a._v("Class")]),a._v(" 对象被 "),s("code",[a._v("GC")]),a._v("。")]),a._v(" "),s("p",[a._v("卸载类需要满足 3 个要求:")]),a._v(" "),s("ul",[s("li",[a._v("该类的所有的实例对象都已被 "),s("code",[a._v("GC")]),a._v("，也就是说堆不存在该类的实例对象。")]),a._v(" "),s("li",[a._v("该类没有在其他任何地方被引用")]),a._v(" "),s("li",[a._v("该类的类加载器的实例已被 "),s("code",[a._v("GC")])])]),a._v(" "),s("p",[a._v("所以，在 "),s("code",[a._v("JVM")]),a._v(" 生命周期内，由 "),s("code",[a._v("jvm")]),a._v(" 自带的类加载器加载的类是不会被卸载的。但是由我们自定义的类加载器加载的类是可能被卸载的。")]),a._v(" "),s("p",[s("code",[a._v("jdk")]),a._v(" 自带的 "),s("code",[a._v("BootstrapClassLoader, ExtClassLoader, AppClassLoader")]),a._v(" 负责加载 "),s("code",[a._v("jdk")]),a._v(" 提供的类，所以它们(类加载器的实例)肯定不会被回收。而我们自定义的类加载器的实例是可以被回收的，所以使用我们自定义加载器加载的类是可以被卸载掉的。")]),a._v(" "),s("h2",{attrs:{id:"类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),s("p",[a._v("类加载器"),s("code",[a._v("ClassLoader")]),a._v("，是 "),s("code",[a._v("Java")]),a._v(" 的核心组件，只负责加载"),s("code",[a._v("class")]),a._v("文件，"),s("code",[a._v("class")]),a._v("文件在文件开头有特定的文件标示，将"),s("code",[a._v("class")]),a._v("文件字节码内容加载到内存中。"),s("code",[a._v("ClassLoader")]),a._v("只负责"),s("code",[a._v("class")]),a._v("文件的加载，至于它是否可以运行，则由执行引擎"),s("code",[a._v("Execution Engine")]),a._v("决定。")]),a._v(" "),s("blockquote",[s("p",[a._v("JVM自带的加载器")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("启动类加载器："),s("code",[a._v("BootstrapClassLoader")]),a._v(" 主要加载的是JVM自身需要的类，这个类加载使用"),s("code",[a._v("C++")]),a._v("语言实现的，是虚拟机自身的一部分，它负责将 "),s("code",[a._v("<JAVA_HOME>/lib")]),a._v("路径下的核心类库或"),s("code",[a._v("-Xbootclasspath")]),a._v("参数指定的路径下的"),s("code",[a._v("jar包")]),a._v("加载到内存中，注意由于虚拟机是按照文件名识别加载"),s("code",[a._v("jar包")]),a._v("的，如"),s("code",[a._v("rt.jar")]),a._v("，如果文件名不被虚拟机识别，即使把"),s("code",[a._v("jar包")]),a._v("丢到"),s("code",[a._v("lib")]),a._v("目录下也是没有作用的(出于安全考虑，"),s("code",[a._v("Bootstrap")]),a._v("启动类加载器只加载包名为"),s("code",[a._v("java、javax、sun")]),a._v("等开头的类)。")])]),a._v(" "),s("li",[s("p",[a._v("扩展类加载器："),s("code",[a._v("ExtensionClassLoader")]),a._v(" 扩展类加载器是"),s("code",[a._v("sun.misc.Launcher$ExtClassLoader")]),a._v("类，由"),s("code",[a._v("Java")]),a._v("语言实现的，是"),s("code",[a._v("Launcher")]),a._v("的静态内部类，它负责加载"),s("code",[a._v("<JAVA_HOME>/lib/ext")]),a._v("目录下或者由系统变量"),s("code",[a._v("-Djava.ext.dir")]),a._v("指定位路径中的类库，开发者可以直接使用标准扩展类加载器。")])]),a._v(" "),s("li",[s("p",[a._v("系统类加载器："),s("code",[a._v("AppClassLoader")]),a._v("也叫应用类程序加载器，也是由"),s("code",[a._v("Java")]),a._v("实现的。它从环境变量"),s("code",[a._v("classpath")]),a._v("或者系统属性"),s("code",[a._v("java.class.path")]),a._v("所指定的目录中加载类，它是用户自定义的类加载器的默认父加载器。")])])]),a._v(" "),s("blockquote",[s("p",[a._v("用户自定义加载器")])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("java.lang.ClassLoader")]),a._v("的子类，用户可以定制类的加载方式。")])]),a._v(" "),s("h3",{attrs:{id:"双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),s("p",[a._v("当"),s("code",[a._v("JVM")]),a._v("加载一个类的时候，下层的加载器会将任务给上一层类加载器，上一层加载检查它的命名空间中是否已经加载这个类，如果已经加载，则直接使用这个类。如果没有加载，继续往上委托直到顶部。检查之后，按照相反的顺序进行加载。如果"),s("code",[a._v("Bootstrap")]),a._v("加载不到这个类，则往下委托，直到找到这个类，如果都不能加载则"),s("code",[a._v("ClassNotFoundException")]),a._v(" 。一个类可以被不同的类加载器加载。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210706145538210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("可见性限制：下层的加载器能够看到上层加载器中的类，反之则不行，委派只能从下到上。")]),a._v(" "),s("p",[a._v("不允许卸载类：类加载可以加载一个类，但不能够卸载一个类。但是类加载器可以被创建或者删除。")]),a._v(" "),s("p",[s("strong",[a._v("ClassLoader源码（双亲委派机制模型）")]),a._v("\n（往上看有没有被加载过，有就使用，则确保唯一性和安全性，如果都没有则往下尝试加载，也是有就使用，如果都不能加载则"),s("code",[a._v("ClassNotFoundException")]),a._v(" ）")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoadingLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 首先检查这个classsh是否已经加载过了")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findLoadedClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" t0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nanoTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// c==null表示没有加载，如果有父类的加载器则让父类加载器加载")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//如果父类的加载器为空 则说明递归到bootStrapClassloader了")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//bootStrapClassloader比较特殊无法通过get获取")]),a._v("\n                        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findBootstrapClassOrNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nanoTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("sun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("PerfCounter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParentDelegationTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("addTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" t0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("sun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("PerfCounter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFindClassTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("addElapsedTimeFrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("sun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("PerfCounter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFindClasses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolveClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br")])]),s("p",[s("strong",[a._v("委托机制的意义")])]),a._v(" "),s("ul",[s("li",[a._v("防止内存中出现多份同样的字节码。\n比如两个类A和类B都要加载"),s("code",[a._v("System")]),a._v("类，如果不用委托而是自己加载自己的，那么类A就会加载一份"),s("code",[a._v("System")]),a._v("字节码，然后类B又会加载一份"),s("code",[a._v("System")]),a._v("字节码，这样内存中就出现了两份"),s("code",[a._v("System")]),a._v("字节码。如果使用委托机制，会递归的向父类查找，也就是首选用"),s("code",[a._v("Bootstrap")]),a._v("尝试加载，如果找不到再向下。这里的"),s("code",[a._v("System")]),a._v("就能在"),s("code",[a._v("Bootstrap")]),a._v("中找到然后加载，如果此时类B也要加载"),s("code",[a._v("System")]),a._v("，也从"),s("code",[a._v("Bootstrap")]),a._v("开始，此时"),s("code",[a._v("Bootstrap")]),a._v("发现已经加载过了"),s("code",[a._v("System")]),a._v("那么直接返回内存中的"),s("code",[a._v("System")]),a._v("即可而不需要重新加载，这样内存中就只有一份"),s("code",[a._v("System")]),a._v("的字节码了。")]),a._v(" "),s("li",[a._v("安全性\n黑客自定义一个"),s("code",[a._v("java.lang.String")]),a._v("类，该"),s("code",[a._v("String")]),a._v("类具有系统的"),s("code",[a._v("String")]),a._v("类一样的功能，只是在某个函数稍作修改。比如"),s("code",[a._v("equals")]),a._v("函数，这个函数经常使用，如果在这这个函数中，黑客加入一些“病毒代码”。并且通过自定义类加载器加入到"),s("code",[a._v("JVM")]),a._v("中。此时，如果没有双亲委派模型，那么"),s("code",[a._v("JVM")]),a._v("就可能误以为黑客自定义的"),s("code",[a._v("java.lang.String")]),a._v("类是系统的"),s("code",[a._v("String")]),a._v("类，导致“病毒代码”被执行。而有了双亲委派模型，黑客自定义的"),s("code",[a._v("java.lang.String")]),a._v("类永远都不会被加载进内存。因为首先是最顶端的类加载器加载系统的"),s("code",[a._v("java.lang.String")]),a._v("类，最终自定义的类加载器无法加载"),s("code",[a._v("java.lang.String")]),a._v("类。\n或许你会想，我在自定义的类加载器里面强制加载自定义的"),s("code",[a._v("java.lang.String")]),a._v("类，不去通过调用父加载器不就好了吗?确实，这样是可行。但是，在"),s("code",[a._v("JVM")]),a._v("中，判断一个对象是否是某个类型时，如果该对象的实际类型与待比较的类型的类加载器不同，那么会返回"),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("p",[s("a",{attrs:{href:"http://www.blogjava.net/zhuxing/archive/2008/08/08/220841.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java类加载原理解析"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903633574690824",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM 类加载机制及双亲委派模型"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"运行时数据区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区"}},[a._v("#")]),a._v(" 运行时数据区")]),a._v(" "),s("h3",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),s("p",[a._v("对于大多数应用来说，"),s("code",[a._v("Java堆")]),a._v("是"),s("code",[a._v("Java")]),a._v("虚拟机所管理的内存最大的一块，"),s("code",[a._v("Java堆")]),a._v("是被所有线程共享的区域，在虚拟机启动时创建。此内存区域唯一的目的性就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),a._v(" "),s("p",[s("code",[a._v("Java堆")]),a._v("是垃圾收集器管理的主要区域，因此被称为"),s("code",[a._v("GC堆")]),a._v("。如果从内存回收的角度看，由于现在的收集器基本上都是采用的分代收集算法，所以"),s("code",[a._v("Java堆")]),a._v("还可以细分为：新生代和老年代，在细致一点有"),s("code",[a._v("Eden空间")]),a._v("、"),s("code",[a._v("From Survivor 空间")]),a._v("、"),s("code",[a._v("To Survivor空间")]),a._v("等。")]),a._v(" "),s("p",[a._v("根据"),s("code",[a._v("Java虚拟机")]),a._v("规范，"),s("code",[a._v("Java堆")]),a._v("可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样，实现时既可以实现成固定大小，也可以时可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过"),s("code",[a._v("-Xmx")]),a._v("和"),s("code",[a._v("-Xms")]),a._v("控制）。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210710104559178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("堆大小=新生代+老年代。堆的大小可以通过参数"),s("code",[a._v("-Xms")]),a._v("、"),s("code",[a._v("-Xmx")]),a._v("来指定.")]),a._v(" "),s("p",[a._v("新生代与老年代默认的比值为1:2,（该值可以通过参数 "),s("code",[a._v("-XX:NewRatio")]),a._v("来指定，默认"),s("code",[a._v("-XX:NewRatio=2")]),a._v("年轻代占整个堆的1/3，老年代占堆的2/3；假如"),s("code",[a._v("-XX:NewRatio=4")]),a._v("新生代占1,老年代占4,年轻代占整个堆的1/5，"),s("code",[a._v("NewRatio")]),a._v("就是设置老年代的占比,剩下的1给新生代）。")]),a._v(" "),s("p",[a._v("默认情况下，"),s("code",[a._v("Edem:from:to=8:1:1")]),a._v("，可以通过参数"),s("code",[a._v("-XX:SurvivorRatio")]),a._v("来设置"),s("code",[a._v("Eden")]),a._v("区与每一个"),s("code",[a._v("Survivor")]),a._v("区的比值.")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v(" 每次只会使⽤"),s("code",[a._v("Eden")]),a._v(" 和其中的⼀块 "),s("code",[a._v("Survivor")]),a._v("区域来为对象服务，所以⽆论什么时候，总是有⼀块 "),s("code",[a._v("Survivor")]),a._v("区域是空闲着的。因此，新⽣代实际可⽤的内存空间为 9/10 ( 即90% )的新⽣代空间。")]),a._v(" "),s("h3",{attrs:{id:"方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),s("p",[a._v("方法区和"),s("code",[a._v("Java堆")]),a._v("一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的"),s("code",[a._v("类信息、常量、静态变量、即时编译器编译后的代码")]),a._v("等数据。虽然"),s("code",[a._v("Java虚拟机")]),a._v("规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做"),s("code",[a._v("Non-Heap(非堆)")]),a._v("，目的应该就是与"),s("code",[a._v("Java堆")]),a._v("区分开来。")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JDK1.8")]),a._v("以前，"),s("code",[a._v("HotSpot")]),a._v("使用永久代来实现方法区，所以某些场合也认为方法区和永久代是一个概念。")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JDK 1.6")]),a._v("的 时候"),s("code",[a._v("HotSpot")]),a._v("开发团队就有放弃永久代，逐步改为采用本地内存（"),s("code",[a._v("Native Memory")]),a._v("）来实现方法区的计划了，到了"),s("code",[a._v("JDK 1.7")]),a._v("的"),s("code",[a._v("HotSpot")]),a._v("，已经把原本放在永久代的字符串常量池、静态变量等移出，而到了 "),s("code",[a._v("JDK 1.8")]),a._v("，终于完全废弃了永久代的概念，改用在本地内存中实现的元空间（"),s("code",[a._v("Meta- space")]),a._v("）来代替，把"),s("code",[a._v("JDK 1.7")]),a._v("中永久代还剩余的内容（主要是类型信息）全部移到元空间中。")]),a._v(" "),s("p",[a._v("元空间的本质和永久代类似，都是对 "),s("code",[a._v("JVM")]),a._v("规范中方法区的实现。元空间与永久代最大的区别在于：永久代使用的是堆内存，但是"),s("code",[a._v("Java8")]),a._v("以后的元空间并不在虚拟机中而是使用本机物理内存。")]),a._v(" "),s("p",[s("code",[a._v("Java虚拟机")]),a._v("规范对方法区的限制非常宽松，除了和"),s("code",[a._v("Java堆")]),a._v("一样不需要连续的内存和可以选择固定大小或者可以扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是对类型的卸载，条件相当苛刻，但这个区域的回收确实是有必要的.")]),a._v(" "),s("p",[a._v("根据"),s("code",[a._v("Java虚拟机")]),a._v("规范，当方法区无法满足内存分配需求是，将抛出"),s("code",[a._v("OutOfMemoryError")]),a._v("异常。")]),a._v(" "),s("h3",{attrs:{id:"程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),s("p",[s("code",[a._v("Program Counter Register")]),a._v("是一块比较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，不用虚拟机不同方法实现），字节码解释器工作是就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。")]),a._v(" "),s("p",[a._v("由于"),s("code",[a._v("Java虚拟机")]),a._v("的多线程是通过线程轮流切换并分配处理器执行时间来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能够恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，称这类内存区域为"),s("code",[a._v("线程私有")]),a._v("的内存。")]),a._v(" "),s("p",[a._v("如果线程正在执行的是一个"),s("code",[a._v("Java")]),a._v("方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是"),s("code",[a._v("Natvie")]),a._v("方法，这个计数器值则为空"),s("code",[a._v("（Undefined）")]),a._v("。")]),a._v(" "),s("p",[a._v("此内存空间是唯一一个在"),s("code",[a._v("Java虚拟机")]),a._v("规范中没有规定"),s("code",[a._v("OutOfMemoryError")]),a._v("情况的区域。")]),a._v(" "),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),s("p",[a._v("与程序计数器一样，"),s("code",[a._v("Java虚拟机栈")]),a._v("也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是"),s("code",[a._v("Java")]),a._v("方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧用于存储"),s("code",[a._v("局部变量表")]),a._v("、"),s("code",[a._v("操作栈")]),a._v("、"),s("code",[a._v("动态链接")]),a._v("、"),s("code",[a._v("方法出口")]),a._v("、等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。")]),a._v(" "),s("p",[a._v("局部变量表存放了编译器可知的各种基本数据类型"),s("code",[a._v("(boolean、byte、char、short、int、float、long、double)")]),a._v("，对象引用"),s("code",[a._v("(reference类型")]),a._v("，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置)和"),s("code",[a._v("returnAdress类型")]),a._v("(指向了一条字节码指令的地址)。")]),a._v(" "),s("p",[a._v("其中64位长度的"),s("code",[a._v("long")]),a._v("和"),s("code",[a._v("double")]),a._v("类型的数据会占用2个局部变量空间"),s("code",[a._v("(Slot)")]),a._v("，其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("Java虚拟机")]),a._v("规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出"),s("code",[a._v("StackOverflowError")]),a._v("异常；如果虚拟机可以动态扩展（当前大部分"),s("code",[a._v("Java虚拟机")]),a._v("都可以动态扩展，只不过"),s("code",[a._v("Java")]),a._v("虚拟机规范中也允许固定长度的虚拟机栈），当扩展是无法申请到足够的内存时会抛出"),s("code",[a._v("OOM")]),a._v("异常。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210707134716772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h3",{attrs:{id:"本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),s("p",[s("code",[a._v("Native Method Stacks")]),a._v("与虚拟机栈作用类似，其区别不过是虚拟机栈为虚拟机执行"),s("code",[a._v("Java")]),a._v("方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的"),s("code",[a._v("Native")]),a._v("方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（如"),s("code",[a._v("Sun HotSpot虚拟机")]),a._v("）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出"),s("code",[a._v("StackOverflowError")]),a._v("和"),s("code",[a._v("OOM")]),a._v("异常.")]),a._v(" "),s("p",[a._v("方法的执行都是伴随着线程的。原始类型的本地变量以及引用都存放在线程栈中。而引用关联的对象比如"),s("code",[a._v("String")]),a._v("，都存在在堆中。为了更好的理解上面这段话，我们可以看一个例子：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("apache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("log4j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LOGGER")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getLogger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")]),a._v(" formatter "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"dd.MM.YYYY"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" today "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" formatter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LOGGER")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("today "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('": "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("这段程序的数据在内存中的存放如下：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210706160752161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("h3",{attrs:{id:"outofmemoryerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror"}},[a._v("#")]),a._v(" OutOfMemoryError")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread “main”"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OutOfMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" heap space\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("原因：对象不能被分配到堆内存中")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread “main”"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OutOfMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PermGen")]),a._v(" space\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("原因：类或者方法不能被加载到持久代。它可能出现在一个程序加载很多类的时候，比如引用了很多第三方的库；")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread “main”"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OutOfMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Requested")]),a._v(" array size exceeds "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("VM")]),a._v(" limit\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("原因：创建的数组大于堆内存的空间")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread “main”"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OutOfMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" request  bytes "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("for "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v(" Out")]),a._v(" of swap space"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("原因：分配本地分配失败。"),s("code",[a._v("JNI")]),a._v("、本地库或者"),s("code",[a._v("Java虚拟机")]),a._v("都会从本地堆中分配内存空间。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread “main”"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OutOfMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("  （"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Native")]),a._v(" method）\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("原因：同样是本地方法内存分配失败，只不过是"),s("code",[a._v("JNI")]),a._v("或者本地方法或者"),s("code",[a._v("Java虚拟机")]),a._v("发现")]),a._v(" "),s("h2",{attrs:{id:"为什么java要在虚拟机里运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么java要在虚拟机里运行"}},[a._v("#")]),a._v(" 为什么Java要在虚拟机里运行？")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("作为一门高级语言，语法复杂，抽象程度高。因此，直接在硬件上运行这样复杂的程序并不现实。所以呢，在运行"),s("code",[a._v("Java")]),a._v("程序之前，需要对其进行一番转换。")]),a._v(" "),s("p",[a._v("将"),s("code",[a._v("Java")]),a._v("程序转成"),s("code",[a._v("Java")]),a._v("字节码，这样便可以在不同平台上的虚拟机实现运行。这便是"),s("code",[a._v("一次编写，到处运行")]),a._v("。")]),a._v(" "),s("p",[a._v("虚拟机的另外一个好处是它带来了一个托管环境，这个托管环境能代替我们处理一些代码中冗长而且容易出错的部分。比如自动内存管理与垃圾回收。除此之外，还提供了诸如数组越界、动态类型、安全权限等等动态检测，使得我们不用书写这些无关业务逻辑的代码。")]),a._v(" "),s("h2",{attrs:{id:"java文件编译到执行的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java文件编译到执行的过程"}},[a._v("#")]),a._v(" Java文件编译到执行的过程")]),a._v(" "),s("p",[a._v("1、"),s("code",[a._v("Java")]),a._v("源码"),s("code",[a._v(".java文件")]),a._v("首先通过"),s("code",[a._v("Java编译器")]),a._v("进行编译，其中编译原理包含6部分内容。")]),a._v(" "),s("p",[a._v("2、字节码文件被"),s("code",[a._v("Java虚拟机")]),a._v("通过"),s("code",[a._v("类加载器")]),a._v("加载到内存，（加载后的"),s("code",[a._v("Java")]),a._v("类会被存放在"),s("code",[a._v("方法区")]),a._v("中，实际运行时，虚拟机会执行方法区中的代码。）并通过"),s("code",[a._v("字节码校验器")]),a._v("进行字节码的合法性校验，即可通过翻译字节码"),s("code",[a._v("(解释执行)")]),a._v("或者"),s("code",[a._v("JIT")]),a._v("编译器"),s("code",[a._v("(编译执行)")]),a._v("进行程序的运行，无论经过哪种方式，都需要经过不同操作系统提供的具体指令。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210703172504696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210703210351245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("blockquote",[s("p",[a._v("之所以称为Java字节码，是因为Java字节码指令的操作码（opcode）被固定为一个字节。")])]),a._v(" "),s("blockquote",[s("p",[a._v("解释执行：即逐条将字节码翻译成机器码进行执行。\n即时编译：即将一个方法中包含的所有字节码编译成机器码后再执行。\n前者优势在于无需等待编译，而后者的优势在于实际运行速度更快。HotSpot默认采用混合模式，综合了两者的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。")])]),a._v(" "),s("h2",{attrs:{id:"jvm是如何执行方法调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm是如何执行方法调用"}},[a._v("#")]),a._v(" JVM是如何执行方法调用")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("VariableParameterDemo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1111111"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"222222"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invokeInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"int"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invokeInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//222222")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//222222")]),a._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 只有手动绕开可变长参数的语法糖，才能调用第一个 invoke 方法")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invokeInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 1、同一个类中出现多个名字相同，并且参数类型相同的方法，无法通过编译。\n     * 也就是说，如果想在同一个类中定义名字相同的方法，那么它们参数类型必须不同。\n     * 这些方法之间的关系，叫做重载。\n     *\n     * 重载除了同一个类中的方法，也可以作用于这个类所继承来的方法。\n     * 也就是说，如果子类和父类中非私有方法同名的方法，而这两个方法参数类型不同，或参数长度不同，\n     * 那么这两个方法同样构成了重载。\n     *\n     * 如果子类定义了与父类中非私有方法同名的方法，且两个方法的参数类型都相同。\n     * 当这个两个方法都是静态的，那么子类中的方法隐藏了父类中的方法(super调用不到)\n     * 当这两个方法都不是静态的，且都不是私有的，那么子类的方法重写了父类中的方法。\n     *\n     * 2、重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java编译器会根据\n     * 所传入参数的声明类型（注意于实际类型区分）来选取重载方法。\n     *\n     * 2.1、选取的过程分为三个阶段：\n     * 1、在不考虑对基本类型自动装拆箱，以及可变长参数的情况下选取重载方法。\n     * 2、如果在第一个阶段中没有找到适配的方法，那么在允许自动拆箱，但不允许可变长参数的情况下选取重载方法。\n     * 3、如果在第二个阶段中没有找到适配的方法，那么在允许自动拆箱以及可变长参数的情况下选择重载方法。\n     *\n     * 如果 Java 编译器在同一个阶段中找到了多个适配的方法，那么它会在其中选择一个最为贴切的，\n     * 而决定贴切程度的一个关键就是形式参数类型的继承关系。\n     *\n     * 在上面invoke中，当传入 null 时，它既可以匹配第一个方法中声明为 Object 的形式参\n     * 数，也可以匹配第二个方法中声明为 String 的形式参数。由于 String 是 Object 的子类，\n     * 因此 Java 编译器会认为第二个方法更为贴切。\n     */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br")])]),s("h3",{attrs:{id:"jvm的静态绑定和动态绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm的静态绑定和动态绑定"}},[a._v("#")]),a._v(" JVM的静态绑定和动态绑定")]),a._v(" "),s("p",[a._v("1、"),s("code",[a._v("Java虚拟机")]),a._v("识别方法的关键在于类名、方法名以及方法描述符。")]),a._v(" "),s("p",[a._v("2、方法描述符：它是由方法的参数类型以及返回类型所构成的。在同一个类中，如果同时出现多个名字相同且描述符也相同的方法，那么"),s("code",[a._v("Java虚拟机")]),a._v("会在类验证阶段报错。")]),a._v(" "),s("p",[a._v("3、"),s("code",[a._v("Java虚拟机")]),a._v("对方法的重写判断同样基于方法描述符。也就是说，如果子类定义了与父类中非私有，非静态方法同名的方法，那么只有当这两个方法的参数类型以及返回类型一致，才会被判定为重写。")]),a._v(" "),s("p",[a._v("4、由于对重载方法的区分在编译阶段已经完成，可以认为"),s("code",[a._v("Java虚拟机")]),a._v("不存在重载这一概念。因此在某些地方，重载也被称为静态绑定，或者编译时多态，而重写则被称为动态绑定。")]),a._v(" "),s("p",[a._v("这个说法在"),s("code",[a._v("Java虚拟机")]),a._v("语境下并非完全正确。这是因为某个类中的重载方法可能被它的子类所重写，因此"),s("code",[a._v("Java编译器")]),a._v("会将所有对非私有实例方法的调用编译为需要动态绑定的类型。确切地说，"),s("code",[a._v("Java虚拟机")]),a._v("中的静态绑定是指在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。")]),a._v(" "),s("p",[s("code",[a._v("Java虚拟机")]),a._v("的动态绑定是通过方法表这一数据结构（本质就是个数组）来实现的。方法表中每一个重写方法的索引值，与父类方法表中被重写的方法的索引值一致。")]),a._v(" "),s("p",[a._v("在解析虚方法（方法重写的方法，可认为就是虚方法）调用时，"),s("code",[a._v("Java虚拟机")]),a._v("会记录下所声明的目标方法的索引值，并且在运行时根据这个索引值查找具体的目标方法。")]),a._v(" "),s("p",[s("code",[a._v("Java虚拟机")]),a._v("中的即时编译器会使用内联缓存来加速动态绑定。"),s("code",[a._v("Java虚拟机")]),a._v("所采用的单态内联缓存将记录调用者的动态类型，以及它所对应的目标方法。当碰到新的调用者时，如果其动态类型与缓存中的类型匹配，则直接调用缓存的目标方法。否则，"),s("code",[a._v("Java虚拟机")]),a._v("将内联缓存劣化为超多态内联缓存，在今后的执行过程中直接使用方法表进行动态绑定。")]),a._v(" "),s("h2",{attrs:{id:"jvm是如何处理异常的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm是如何处理异常的"}},[a._v("#")]),a._v(" JVM是如何处理异常的？")]),a._v(" "),s("h3",{attrs:{id:"异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("语言规范中，所有异常都是"),s("code",[a._v("Throwable")]),a._v("l类或者其子类的实例。")]),a._v(" "),s("p",[s("code",[a._v("Throwable")]),a._v("有两个直接子类")]),a._v(" "),s("p",[a._v("1、"),s("code",[a._v("Error")]),a._v("：涵盖程序不应捕获的异常，当程序触发"),s("code",[a._v("Error")]),a._v("，它的执行状态已经无法恢复，需要中止线程甚至是中止虚拟机。")]),a._v(" "),s("p",[a._v("2、"),s("code",[a._v("Exception")]),a._v("：涵盖程序可能需要捕获并且处理的异常。"),s("code",[a._v("Exception")]),a._v("有一个特殊的子类"),s("code",[a._v("RuntimeException")]),a._v("，用来表示“程序虽然无法继续执行，但是还能抢救一下”的情况。"),s("code",[a._v("RuntimeException")]),a._v("和"),s("code",[a._v("Error")]),a._v("都是非检查异常。其他的异常都属于检查异常。在"),s("code",[a._v("Java")]),a._v("中，所有的检查异常都需要程序显示的捕获。或者在方法声明中使用"),s("code",[a._v("throws")]),a._v("关键字标注。")]),a._v(" "),s("h3",{attrs:{id:"jvm如何捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm如何捕获异常"}},[a._v("#")]),a._v(" JVM如何捕获异常")]),a._v(" "),s("p",[a._v("在编译生成的字节码中，每个方法都附带一个异常表。异常表中的每一个条目代表一个异常\n处理器，并且由 "),s("code",[a._v("from")]),a._v(" 指针、"),s("code",[a._v("to")]),a._v(" 指针、"),s("code",[a._v("target")]),a._v("指针以及所捕获的异常类型构成。这些指针\n的值是字节码索引"),s("code",[a._v("（bytecode index，bci）")]),a._v("，用以定位字节码。")]),a._v(" "),s("p",[a._v("其中，"),s("code",[a._v("from")]),a._v(" 指针和 "),s("code",[a._v("to")]),a._v(" 指针标示了该异常处理器所监控的范围，例如 "),s("code",[a._v("try")]),a._v(" 代码块所覆盖的\n范围。"),s("code",[a._v("target")]),a._v(" 指针则指向异常处理器的起始位置，例如 "),s("code",[a._v("catch")]),a._v(" 代码块的起始位置。")]),a._v(" "),s("p",[a._v("当程序触发异常时，"),s("code",[a._v("Java 虚拟机")]),a._v("会从上至下遍历异常表中的所有条目。当触发异常的字节\n码的索引值在某个异常表条目的监控范围内，"),s("code",[a._v("Java 虚拟机")]),a._v("会判断所抛出的异常和该条目想\n要捕获的异常是否匹配。如果匹配，"),s("code",[a._v("Java 虚拟机")]),a._v("会将控制流转移至该条目 "),s("code",[a._v("target")]),a._v("指针指向\n的字节码。")]),a._v(" "),s("p",[a._v("如果遍历完所有异常表条目，"),s("code",[a._v("Java 虚拟机")]),a._v("仍未匹配到异常处理器，那么它会弹出当前方法\n对应的 "),s("code",[a._v("Java 栈帧")]),a._v("，并且在调用者"),s("code",[a._v("（caller）")]),a._v("中重复上述操作。在最坏情况下，"),s("code",[a._v("Java 虚拟机")]),a._v("\n需要遍历当前线程"),s("code",[a._v("Java 栈")]),a._v("上所有方法的异常表。")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://tech.meituan.com/2017/12/29/jvm-optimize.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("从实际案例聊聊Java应用的GC优化"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"gc类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc类型"}},[a._v("#")]),a._v(" GC类型")]),a._v(" "),s("ul",[s("li",[a._v("Full GC （Major GC）：发生于老年代，耗时较长，发生频率低。")]),a._v(" "),s("li",[a._v("Minor GC ： 发生于年轻代，耗时较短、发生频率高。")])]),a._v(" "),s("h2",{attrs:{id:"gc原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc原理"}},[a._v("#")]),a._v(" GC原理")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210710104637279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),s("blockquote",[s("p",[a._v("GC大致过程")])]),a._v(" "),s("p",[a._v("新生区是类的诞生、成长、消亡的区域，一个类在这产生，应用，最后被垃圾回收器收集，结束生命。")]),a._v(" "),s("p",[a._v("新生区又分为两个部分：伊甸区"),s("code",[a._v("Eden")]),a._v("和幸存者区"),s("code",[a._v("Survivor")]),a._v("，所有的类都是在伊甸区被"),s("code",[a._v("new")]),a._v("出来的。幸存者区有两个："),s("code",[a._v("from")]),a._v("区和"),s("code",[a._v("to")]),a._v("区。当伊甸园区的空间用完时，程序又需要创建对象，"),s("code",[a._v("JVM")]),a._v("的垃圾回收器将对伊甸园区进行垃圾回收"),s("code",[a._v("(Minor GC)")]),a._v("，将伊甸园区中的不在被其他对象所引用的对象进行销毁，然后将伊甸园区中的剩余对象移动到"),s("code",[a._v("from")]),a._v("区，若"),s("code",[a._v("from")]),a._v("区也满了，再对该区进行垃圾回收，然后移动到"),s("code",[a._v("to")]),a._v("区，")]),a._v(" "),s("p",[a._v("如果"),s("code",[a._v("to")]),a._v("区也满了，再移动到养老区，若养老区也满了，这时将产生"),s("code",[a._v("Major GC(Full GC)")]),a._v("，进行养老区的内存清理，若养老区执行了清理之后依然无法进行对象的保存，就会报"),s("code",[a._v("OOM")]),a._v("异常。")]),a._v(" "),s("blockquote",[s("p",[a._v("Minor GC 过程")])]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("Eden")]),a._v("、"),s("code",[a._v("Survivor From")]),a._v("复制到"),s("code",[a._v("Survivor To")]),a._v("，年龄+1\n首次，当"),s("code",[a._v("Eden")]),a._v("区满的时候会触发第一次"),s("code",[a._v("GC")]),a._v("，把还活着的对象拷贝到"),s("code",[a._v("Survivor From")]),a._v("区，当"),s("code",[a._v("Eden")]),a._v("区再次触发"),s("code",[a._v("GC")]),a._v("的时候会扫描"),s("code",[a._v("Eden")]),a._v("区和"),s("code",[a._v("From")]),a._v("区域，对这两个区域进行垃圾回收，经过这次回收后还存活的对象，则直接复制到"),s("code",[a._v("To")]),a._v("区域（如果有对象的年龄已经达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1。")])]),a._v(" "),s("li",[s("p",[a._v("清空"),s("code",[a._v("Eden")]),a._v("、"),s("code",[a._v("Survivor From")]),a._v("\n然后清空"),s("code",[a._v("Eden")]),a._v("、"),s("code",[a._v("Survivor From")]),a._v("中的对象")])]),a._v(" "),s("li",[s("p",[a._v("复制之后又交换，谁空谁是"),s("code",[a._v("To")]),a._v("\n最后，"),s("code",[a._v("Survivor From")]),a._v("和"),s("code",[a._v("Survivor To")]),a._v("互换，原"),s("code",[a._v("Survivor")]),a._v(" 成为下一次"),s("code",[a._v("GC")]),a._v("时的"),s("code",[a._v("Survivor From")]),a._v("区。部分对象会在"),s("code",[a._v("From")]),a._v("区和"),s("code",[a._v("To")]),a._v("区域中复制来复制去，如此交换默认15次（由"),s("code",[a._v("JVM")]),a._v("参数"),s("code",[a._v("MaxTenuringThreshold")]),a._v("控制，默认等于15），如果最终还是存活，就存入到老年代。")])])]),a._v(" "),s("p",[a._v("⽆论是"),s("code",[a._v("Minor GC")]),a._v("还是"),s("code",[a._v("Full GC")]),a._v("，都会产⽣停顿现象，即"),s("code",[a._v("Stop-the-World")]),a._v("。"),s("code",[a._v("Minor GC")]),a._v("停顿时间较短，⽽"),s("code",[a._v("Full GC")]),a._v("因耗时较⻓将导致⻓时间停顿、系统⽆响应，极⼤地影响系统性能。因此，对"),s("code",[a._v("Full GC")]),a._v("⽇志的监控及分析在性能优化中极为重要。")]),a._v(" "),s("h2",{attrs:{id:"gc控制参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc控制参数"}},[a._v("#")]),a._v(" GC控制参数")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-Xms设置堆的最小空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-Xmx设置堆的最大空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:NewSize设置新生代最小空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:MaxNewSize设置新生代最大空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:PermSize设置永久代最小空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:MaxPermSize设置永久代最大空间大小。")])]),a._v(" "),s("li",[s("p",[a._v("-Xss设置每个线程的堆栈大小。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:NewRatio设置老年代的占比,剩下的1给新生代")])]),a._v(" "),s("li",[s("p",[a._v("-XX:SurvivorRatio设置"),s("code",[a._v("Eden")]),a._v("区与每一个"),s("code",[a._v("Survivor")]),a._v("区的比值")])]),a._v(" "),s("li",[s("p",[a._v("-XX:MaxTenuringThreshold 来设定年轻代对象移动到老年代年龄，默认年龄是 15 岁。")])])]),a._v(" "),s("p",[a._v("没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。")]),a._v(" "),s("p",[a._v("老年代空间大小=堆空间大小-年轻代大空间大小")]),a._v(" "),s("h2",{attrs:{id:"gc日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc日志"}},[a._v("#")]),a._v(" GC日志")]),a._v(" "),s("ul",[s("li",[a._v("开启GC")])]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JVM")]),a._v("中设置参数"),s("code",[a._v("-verbose:gc")]),a._v("或"),s("code",[a._v("-XX:+PrintGC")]),a._v("，默认"),s("code",[a._v("GC")]),a._v("日志是关闭的。")]),a._v(" "),s("ul",[s("li",[a._v("其他参数")])]),a._v(" "),s("p",[s("code",[a._v("-XX:+PrintGCDetails")]),a._v(" 创建更详细的"),s("code",[a._v("GC")]),a._v("⽇志，默认关闭；")]),a._v(" "),s("p",[s("code",[a._v("-XX:+PrintGCTimeStamps")]),a._v("或"),s("code",[a._v("-XX:+PrintGCDateStamps")]),a._v(" 可⽤于分析GC之间的时间间隔，默认关闭，建议开启；")]),a._v(" "),s("p",[s("code",[a._v("-Xloggc:filename")]),a._v(" 指定将"),s("code",[a._v("GC")]),a._v("⽇志输出到具体⽂件，默认为标准输出；")]),a._v(" "),s("p",[a._v("-"),s("code",[a._v("XX:NumberOfGCLogfiles")]),a._v("及"),s("code",[a._v("-XX:UseGCLogfileRotation")]),a._v(" 控制⽇志⽂件循环，默认是0，即不作任何限制。")]),a._v(" "),s("h2",{attrs:{id:"gc数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc数据"}},[a._v("#")]),a._v(" GC数据")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210710164605622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210710164716799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\n通过"),s("code",[a._v("jstat -gc 23995 1000")]),a._v("可以实时查看"),s("code",[a._v("GC")]),a._v("情况，23995是进程号，1000是刷新频率-即1秒。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210710164826683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RfQV9JX0hfQV9P,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\n参数说明")]),a._v(" "),s("ul",[s("li",[a._v("S0C：年轻代中第⼀个survivor（幸存区）的容量 (字节)")]),a._v(" "),s("li",[a._v("S1C：年轻代中第⼆个survivor（幸存区）的容量 (字节)")]),a._v(" "),s("li",[a._v("S0U：年轻代中第⼀个survivor（幸存区）⽬前已使⽤空间 (字节)")]),a._v(" "),s("li",[a._v("S1U：年轻代中第⼆个survivor（幸存区）⽬前已使⽤空间 (字节)")]),a._v(" "),s("li",[a._v("EC：年轻代中Eden（伊甸园）的容量 (字节)")]),a._v(" "),s("li",[a._v("EU：年轻代中Eden（伊甸园）⽬前已使⽤空间 (字节)")]),a._v(" "),s("li",[a._v("OC：Old代的容量 (字节)")]),a._v(" "),s("li",[a._v("OU：Old代⽬前已使⽤空间 (字节)")]),a._v(" "),s("li",[a._v("PC：Perm(持久代)的容量 (字节)")]),a._v(" "),s("li",[a._v("PU：Perm(持久代)⽬前已使⽤空间 (字节)")]),a._v(" "),s("li",[a._v("YGC：从应⽤程序启动到采样时年轻代中gc次数")]),a._v(" "),s("li",[a._v("YGCT：从应⽤程序启动到采样时年轻代中gc所⽤时间(s)")]),a._v(" "),s("li",[a._v("FGC：从应⽤程序启动到采样时old代(全gc)gc次数")]),a._v(" "),s("li",[a._v("FGCT：从应⽤程序启动到采样时old代(全gc)gc所⽤时间(s)")]),a._v(" "),s("li",[a._v("GCT：从应⽤程序启动到采样时gc⽤的总时间(s)")])]),a._v(" "),s("blockquote",[s("p",[a._v("http://gceasy.io是⼀个在线分析GC⽇志⼯具，国内访问速度和分析速度都较快，分析结果较为详细。分免费版、商业版等。")])]),a._v(" "),s("h2",{attrs:{id:"性能分析和可监控的各种可视工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能分析和可监控的各种可视工具"}},[a._v("#")]),a._v(" 性能分析和可监控的各种可视工具")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000038225249",target:"_blank",rel:"noopener noreferrer"}},[a._v("给，你们想要的排查问题的可视化工具"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("a",{attrs:{href:"http://www.ityouknow.com/jvm/2017/09/22/jvm-tool.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jvm 系列(七):Jvm 调优-工具篇"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"判断对象存亡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断对象存亡"}},[a._v("#")]),a._v(" 判断对象存亡")]),a._v(" "),s("blockquote",[s("p",[a._v("引用计数法")])]),a._v(" "),s("ul",[s("li",[a._v("为每一个对象添加一个引用计数器，用来统计指向该对象的引用个数。一旦某个对象的引用计数器为0，则说明该对象已经死亡，便可以回收了。")]),a._v(" "),s("li",[a._v("具体实现：如果有一个引用，被赋值为某一对象，那么将该对象的引用计数+1。如果一个指向某一对象的引用，被赋值为其他值，那么将该对象的引用计数器-1。也就是说，我们需要截获所有的引用更新操作，并相应地增减目标对象的引用计数器。")]),a._v(" "),s("li",[a._v("缺点：无法处理循环引用对象。比如对象a与b相互引用，除此之外没有其他引用指向a或者b。在这种情况下，a和b实际上已经死了，但由于他们的引用计数器皆不为0，在引用计数法中，这两个对象还活着。因此，这些循环对象所占据的空间将不可回收，从而造成了内存泄漏。")])]),a._v(" "),s("blockquote",[s("p",[a._v("可达性分析算法")])]),a._v(" "),s("ul",[s("li",[a._v("将一系列"),s("code",[a._v("GC Roots")]),a._v("作为初始的存活对象集合，然后从该集合出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程也称之为标记。最终，没有被探索到的对象便是死亡的，是可以回收的。")]),a._v(" "),s("li",[s("code",[a._v("GC Roots")]),a._v(":可理解为由堆外指向堆内的引用，一般而言，"),s("code",[a._v("GC Roots")]),a._v("包括（但不限于）以下几种")])]),a._v(" "),s("p",[a._v("1、"),s("code",[a._v("Java")]),a._v("方法栈帧中的局部变量\n2、已加载类的静态变量\n3、JNI handles\n4、已启动且未停止的"),s("code",[a._v("Java")]),a._v("线程")]),a._v(" "),s("ul",[s("li",[a._v("可达性分析可以解决引用计数法所不能解决的循环问题。即时对象a和b相互引用，只要"),s("code",[a._v("GC Roots")]),a._v("出发无法到达a和b，那么可达性分析便不会将它们加入存活对象合集中。")]),a._v(" "),s("li",[a._v("缺点：在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为null）或者漏报（将引用设置为未被访问过的对象）。")])]),a._v(" "),s("h2",{attrs:{id:"垃圾回收算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[a._v("#")]),a._v(" 垃圾回收算法")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/chenpt/p/9799095.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jvm垃圾回收器（算法篇）"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[a._v("#")]),a._v(" 垃圾回收器")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/chenpt/p/9803298.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jvm垃圾回收器（终结篇）"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"jvm调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优"}},[a._v("#")]),a._v(" JVM调优")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.liaoxuefeng.com/article/1336345083510818",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM调优的正确姿势"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);