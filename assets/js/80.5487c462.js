(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{506:function(s,e,a){"use strict";a.r(e);var t=a(0),r=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[s._v("#")]),s._v(" MVVM")]),s._v(" "),e("ul",[e("li",[s._v("Vue.js 专注于 MVVM 模型的 ViewModel 层。它通过双向数据绑定把 View 层和 Model 层连接了起来。实际的 DOM 封装和输出格式都被抽象为了 Directives 和 Filters。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/4e89840006879496330976e49afdf740.png#pic_center",alt:"在这里插入图片描述"}}),s._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/ee1154b53fcdf1e1f30616fe3453092c.png",alt:"在这里插入图片描述"}})]),s._v(" "),e("h2",{attrs:{id:"viewmodel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#viewmodel"}},[s._v("#")]),s._v(" ViewModel")]),s._v(" "),e("ul",[e("li",[s._v("一个同步 Model 和 View 的对象。在 Vue.js 中，每个 Vue 实例都是一个 ViewModel。它们是通过构造函数 Vue 或其子类被创建出来的。")])]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" vm "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* options */")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view"}},[s._v("#")]),s._v(" View")]),s._v(" "),e("ul",[e("li",[s._v("被 Vue 实例管理的 DOM 节点。")])]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$el \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("Vue.js 使用基于 DOM 的模板。每个 Vue 实例都关联着一个相应的 DOM 元素。当一个 Vue 实例被创建时，它会递归遍历根元素的所有子结点，同时完成必要的数据绑定。当这个视图被编译之后，它就会自动响应数据的变化。")])]),s._v(" "),e("li",[e("p",[s._v("在使用 Vue.js 时，除了自定义指令 (稍后会有解释)，您几乎不必直接接触 DOM。当数据发生变化时，视图将会自动触发更新。这些更新的粒度精确到一个文字节点。同时为了更好的性能，这些更新是批量异步执行的。")])])]),s._v(" "),e("h2",{attrs:{id:"model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model"}},[s._v("#")]),s._v(" Model")]),s._v(" "),e("ul",[e("li",[s._v("一个轻微改动过的原生 JavaScript 对象。")])]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$data "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The Model")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("Vue.js 中的模型就是普通的 JavaScript 对象 —— 也可以称为数据对象。一旦某对象被作为 Vue 实例中的数据，它就成为一个 “响应式” 的对象了。你可以操作它们的属性，同时正在观察它的 Vue 实例也会收到提示。Vue.js 把数据对象的属性都转换成了 ES5 中的 getter/setters，以此达到无缝的数据观察效果：无需脏值检查，也不需要刻意给 Vue 任何更新视图的信号。每当数据变化时，视图都会在下一帧自动更新。")])]),s._v(" "),e("li",[e("p",[s._v("Vue 实例代理了它们观察到的数据对象的所有属性。所以一旦一个对象 { a: 1 } 被观察，那么 vm.$data.a 和 vm.a 将会返回相同的值，而设置 vm.a = 2 则也会修改 vm.$data。")])]),s._v(" "),e("li",[e("p",[s._v("数据对象是被就地转化的，所以根据引用修改数据和修改 vm.$data 具有相同的效果。这也意味着多个 Vue 实例可以观察同一份数据。在较大型的应用程序中，我们也推荐将 Vue 实例作为纯粹的视图看待，同时把数据处理逻辑放在更独立的外部数据层。")])]),s._v(" "),e("li",[e("p",[s._v("值得提醒的是，一旦数据被观察，Vue.js 就不会再侦测到新加入或删除的属性了。作为弥补，我们会为被观察的对象增加 $add , $set和 $delete 方法。")])])]),s._v(" "),e("h2",{attrs:{id:"directives"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#directives"}},[s._v("#")]),s._v(" Directives")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("指令")])]),s._v(" "),e("li",[e("p",[s._v("带特殊前缀的 HTML 特性，可以让 Vue.js 对一个 DOM 元素做各种处理。")])])]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div v"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("text"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"message"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("这里的 div 元素有一个 v-text 指令，其值为 message。Vue.js 会让该 div 的文本内容与 Vue 实例中的 message 属性值保持一致。")])]),s._v(" "),e("li",[e("p",[s._v("Directives 可以封装任何 DOM 操作。比如 v-attr 会操作一个元素的特性；v-repeat 会基于数组来复制一个元素；v-on 会绑定事件等。")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);